//
//  _013_buyAndSellStock2.swift
//  AlgorithmNotes
//
//  Created by HaoCold on 2021/5/19.
//

import Foundation

/*
 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格
 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易(多次买卖一支股票)。
 注意:你不能同时参与多笔交易(你必须在再次购买前出售掉之前的股票)。

 示例1:
 输入: [7,1,5,3,6,4]
 输出: 7
 解释:在第2天(股票价格=1)的时候买入，在第3天(股票价格=5)的时候卖出，
 这笔交易所能获得利润 = 5-1 = 4
 随后，在第4天(股票价格=3)的时候买入，在第5天(股票价格= 6)的时候
 卖出，这笔交易所能获得利润 = 6-3 = 3

 示例2:
 输入: [1,2,3,4,5]
 输出: 4
 解释:在第1天(股票价格=1)的时候买入，在第5天(股票价格 = 5)的时候卖出，
 这笔交易所能获得利润= 5-1=4。
 注意你不能在第1天和第2天接连购买股票，之后再将它们卖出。
 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 
 // 使用贪心算法
 */

func buyAndSellStock_v3(_ prices: [Int]) -> Int {
    var res = 0
    for i in 1..<prices.count {
        if (prices[i] > prices[i - 1]) {
            res += prices[i] - prices[i - 1]
        }
    }
    return res
}
